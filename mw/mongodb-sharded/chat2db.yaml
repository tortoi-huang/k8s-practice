---
apiVersion: v1
kind: Service
metadata:
  name: chat2db
  namespace: "mw"
  labels:
    app.kubernetes.io/instance: chat2db
    app.kubernetes.io/name: chat2db
    app.kubernetes.io/component: chat2db
    app.kubernetes.io/version: 0.0.1
spec:
  type: ClusterIP
  ports:
    - name: chat2db
      port: 10824
      targetPort: web
  selector:
    app.kubernetes.io/instance: chat2db
    app.kubernetes.io/name: chat2db
    app.kubernetes.io/component: chat2db
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chat2db
  namespace: mw
  labels:
    app.kubernetes.io/instance: chat2db
    app.kubernetes.io/name: chat2db
    app.kubernetes.io/component: chat2db
spec:
  ingressClassName: public
  rules:
    - host: "chat2db.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: chat2db
                port:
                  name: chat2db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat2db
  namespace: "mw"
  labels:
    app.kubernetes.io/instance: chat2db
    app.kubernetes.io/name: chat2db
    app.kubernetes.io/component: chat2db
    app.kubernetes.io/version: 0.0.1
spec:
  strategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chat2db
      app.kubernetes.io/name: chat2db
      app.kubernetes.io/component: chat2db
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chat2db
        app.kubernetes.io/name: chat2db
        app.kubernetes.io/component: chat2db
        app.kubernetes.io/version: 0.0.1
    spec:      
      containers:
        - name: chat2db
          image: docker.io/chat2db/chat2db:3.1.19
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: web
              containerPort: 10824
          # env:
          #   - name: 
          #     value: ""
          # livenessProbe:
          #   failureThreshold: 2
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
          #   successThreshold: 1
          #   timeoutSeconds: 20
          #   exec:
          #     command:
          #       - /bin/sh 
          #       - -c 
          #       - mongosh --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
          # readinessProbe:
          #   failureThreshold: 6
          #   initialDelaySeconds: 10
          #   periodSeconds: 30
          #   successThreshold: 1
          #   timeoutSeconds: 20
          #   exec:
          #     command:
          #       - /bin/sh 
          #       - -c 
          #       - mongosh --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
          # volumeMounts:
          #   - name: empty-dir
          #     mountPath: /tmp
          #     subPath: tmp-dir
          #   - name: empty-dir
          #     mountPath: /opt/bitnami/mongodb/conf
          #     subPath: app-conf-dir
          #   - name: empty-dir
          #     mountPath: /opt/bitnami/mongodb/tmp
          #     subPath: app-tmp-dir
          #   - name: empty-dir
          #     mountPath: /opt/bitnami/mongodb/logs
          #     subPath: app-logs-dir
          resources:
            requests:
              memory: 400Mi
            limits:
              memory: 1Gi
              cpu: 1000m
      volumes:
        - name: empty-dir
          emptyDir: {}